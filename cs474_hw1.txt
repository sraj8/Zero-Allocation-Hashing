In your first homework assignment you will gain experience with creating and managing your Git repository, obtaining an open-source Java project from a public Git repo, creating JUnit tests and Gradle and SBT build and run scripts for this application. Doing this homework is essential for successful completion of the rest of this course, since all other homeworks and the course project will share the same features of this homework: pushing your project into your Git repo, creating test cases and build scripts, and using various tools for diagnosing problems with virtual machines and your applications. Those who take both CS474 and CS441 will benefit the most, so by doing this homework you will partially kill (or wound) two birds with one stone.

First things first, you must create your account at BitBucket https://bitbucket.org/, a Git repo management system. It is imperative that you use your UIC email account that has the extension @uic.edu. Once you create an account with your UIC address, BibBucket will assign you an academic status that allows you to create private repos. Bitbucket users with free accounts cannot create private repos, which are essential for submitting your homeworks and projects. I created the team for this class named CS_474_2017. On the evening of August 31 I will use your emails from the class registration roster to add you to the team and you will receive an invitation from BitBucket to join the team. Since it is a full class, please use your UIC email address for communications or Piazza and avoid emails from accounts like funny_bunny1989@gmail.com. If you don't receive a response within 12 hours, please contact via Piazza - your email may go to the spam folder.

Next, you will install IntelliJ, the JDK, and make sure that you can compile and run Java programs. Please make sure that you can run java monitoring tools https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr025.html

Then, you will select an open-source Java application from a repository, say, https://www.openhub.net/ or https://sourceforge.net/ or https://github.com/ or some other open-source repo. Your chosen application should have at least 1,000 non-commented lines of code (LOC) and it should be committed to the repository at least one year ago with more than three commits. You should be able to compile and run this application. Once selected, you should email to your TA and the course instructor with the URI to the application's repo, who will approve the use of your chosen application. If some other student already selected your chosen application before you, you will be asked to find another one.

Now comes your main work - you will push the application into your homework repo fork. You will load it into the IDE IntelliJ and compile and run from there. You will commit and push the IntelliJ project into the repo. Then, you will create JUnit tests, more than one and less than five for the application. After that, you will create Gradle and SBT build configuration scripts and push all testing code and build scripts to the repo. You will use jconsole, visualgc, and other tools to obtain info from the application and attach this information as GUI snapshots or output files to the documentation files in the corresponding repo folder.

Separate repositories are already created for each of your homeworks and for the course project. You will find a corresponding entry for this homework. You will fork this repository and your fork will be private, no one else besides you, the TA and your course instructor will have access to your fork. Please remember to grant a read access to your repository to your TA and your instructor. In future, for the team homeworks and the course project, you should grant the write access to your forkmates. You can commit and push your code as many times as you want. Your code will not be visible and it should not be visible to other students (except for your forkmates for a team project, but not for this homework). When you push it, your instructor and the TA will see your code in your separate private fork. Making your fork public or inviting other students besides your team members to join your fork for an individual homework will result in losing your grade. For grading, only the latest push timed before the deadline will be considered. If you push after the deadline, your grade for the homework will be zero. For more information about using the Git and Bitbucket specifically, please use this link as the starting point https://confluence.atlassian.com/bitbucket/bitbucket-cloud-documentation-home-221448814.html. For those of you who struggle with the Git, I recommend a book by Ryan Hodson on Ry's Git Tutorial. The other book called Pro Git is written by Scott Chacon and Ben Straub and published by Apress and it is freely available https://git-scm.com/book/en/v2/. There are multiple videos on youtube that go into details of the Git organization and use.

Please follow this naming convention while submitting your work : "Firstname_Lastname_hw1", so that we can easily recognize your submission. For other homeworks and the course projects, those who work in groups can use longer names: "Firstname1_Lastname1_Firstname2_Lastname2_Firstname3_Lastname3_hw2". I repeat, make sure that you will give both your TA and me read access to your private forked repository.

You can post questions and replies, statements, comments, discussion, etc. on Piazza. Remember that you cannot share your code and your solutions (beyond your group for a team homework), but you can ask and advise others using Piazza on where resources and sample programs can be found on the internet, how to resolve dependencies and configuration issues, and how to design the logic of the algorithm. Yet, your implementation should be your own and you cannot share it. Alternatively, you cannot copy and paste someone else's implementation and put your name on it. Your submissions will be checked for plagiarism. When posting question and answers on Piazza, please select the appropriate folder, i.e., hw1 to ensure that all discussion threads can be easily located.

Submission deadline: Friday, September 15 at 11PM CST. Your submission will include the application's source code, the Gradle and SBT build configurations, the README.md file in the root directory that contains the description of your implementation with tests, how to compile and run it using SBT and Gradle, how you used Java tools for debugging with snapshots/core dumps when needed, and what are the limitations of your implementation. 

THE INSTRUCTOR (and the TA) WILL NOT ANSWER ANY REQUESTS FROM STUDENTS STARTING 7PM THE EVENING OF THE SUBMISSION DEADLINE.

Evaluation criteria:
- the maximum grade for this homework is 5%. Points are subtracted from this maximum grade: for example, saying that 2% is lost if some requirement is not completed means that the resulting grade will be 5%-2% => 3%;
- no Gradle and/SBT build scripts: up to 4% lost;
- no unit/integration tests: up to 4% lost;
- code does not compile or it crashes without completing the core functionality: up to 5% lost;
- the documentation is missing or insufficient to understand how to compile and run your program and how you used Java monitoring tools: up to 4% lost;
- only a subset of your tests works: up to 3% lost;
- the minimum grade for this homework cannot be less than zero.

That's it, folks!